### 2005/09/19 ### : a few places missing

The packaging is going in the right direction by now, but we're still missing
the findcd.gz and grub/*. Historically, they were stored in the medium
directory (cd: isolinux/*, cf:grub/*, ...).

Those files are always related to bootstrapping. So, we could add a 'bootstrap'
directory next to the 'packaging' directory, which will host such beasts in no
particular order. Note that the same directory could be replicated per project
or software if needed. We'll then put several directories into it, 1 per boot-
strapping method, each with 2 dirs : 'scripts' and 'files'.

Proposal :

  projects/ant-computing/software/findcd/
     => findcd is a software like any other one

  packaging/scripts    => mksp-*, mkfp-*
            media      => medium definitions

  bootstrap/isolinux-sq/scripts
                        files
            pxelinux-sq/...
            grub-sq/...


Note: the 'scripts' subdirectory is intended to put files to *rebuild* the
expected files from the 'files' directory, and not to package them into a
software.

### 2005/09/18 ### : about the product / software problem

It's difficult to arrange versionned software within an unversionned product
which itself implies a packaging and depends on several software. The solution
is then to put products and software side by side :

  packaging/scripts    => mksp-*, mkfp-*
            media      => medium definitions
  platform/nexcom/nsa1045
  projects/ant-computing/products/formilux/1.0/
  projects/exceliance/products/landef/1.0/models
                               landef/1.0/scripts
                               landef/1.5/models
                               landef/1.5/scripts
                               servdef/1.0/models
                               servdef/1.0/scripts
                      software/landef/1.0
                               flxgui/1.0
                               servdef/1.0
                               firmware/1.0
  projects/exosec/products/sentineo/1.0/models



Then we can put all scripts and model definitions within landef/1.0, and if
a new landef occurs, it's easy to conserve existing software.

Last version :

##################

  packaging              => general packaging scripts, media, etc...
  packaging/media        => mksp-*, mkfp-*
            scripts      => medium definitions

  platform               => hardware definitions
  platform/lexcom        => this manufacturer's definitions and defaults
           lexcom/neo    => model definition
                  neris
           nexcom
           nexcom/nsa1041
                  nsa1045
                  nsa1046

  projects               => projects base directory (may be per-project)
  projects/ant-computing/software/formilux/0.1/   => prf, pkg, ... for formilux

                         products/formilux/0.1/   => packaging, etc... for formilux

  projects/exceliance
           exceliance/software/landef             => landef project software base
                               landef/1.0
                                      1.0/scripts
                                          all-scripts
                                          contents
                                          prf
                               flxgui/1.0
                               servdef/1.0
                               firmware/1.0

                      products/landef             => landef project product base
                               landef/1.0
                               landef/1.0/scripts
                               landef/1.0/models          => model definitions
                               landef/1.0/models/ld60
                               landef/1.0/models/ld1000r
                               landef/1.0/models/ld100
                               landef/1.0/models/ld100r
                               landef/1.0/models/ld300r

  projects/exosec/products/sentineo/1.0/models

##################

Product refers to software (packaging merges several software into one product)
and software may refer to product, eg to get the model name before packaging.
But this should be done through environment variables or arguments, otherwise
there would be no possibility for common software to be shared by two products.

### 2005/09/16 ### : about the <target_dir>

instead of moving <target_dir> into <target_dir>/old during process XYZ, it may
be better to create multiple directories within <target_dir>, eg. one per
process, which would lead to something like :

  <target_dir>/pkg/fs/
               raw/fs/
               sq/fs/

We could also refer to the previous dir in each directory :

  <target_dir>/pkg/fs/
               raw/fs/
                   base -> ../fs
               sq/fs/
                  base -> ../raw

The latest dir is then the one which is not referenced. It's easy to find it :

  # for i in *; do touch "$i/FLAG~";done
  # rm -f */base/FLAG~
  # dir="$(echo */FLAG~)" ; ln -s "${dir#/*}" last
  # rm -f */FLAG~

The next starting point is the dir which references no other dir, ie the one
without any "base" directory.

### 2005/09/15 ### : add-ons

A product consists in :
  - packaged software(s) integrated on a medium
  - hardware
  - doc, etc...

Packaged software consists in :
  - hardware-specific software
  - medium- and product-specific packaging form

So a complete product is the result of the integration of 1 or more pieces of
software, each one packaged in a specific way, on a specific hardware.

For some reasons, several software images may be targetted at different
hardware. Example: multiple boot images on an installation CD.

We define the Software Packaging Form (SPF or SP) as the result of a list of
processings applied to an initial software composed of packages. We currently
know of 3 SP :

PKG : used for installs
    1) packages are looked up and filtered
    2) PRF are resolved
    3) PRF + PKG + unpackaged files are copied to <target_dir>/fs

RAW :
    1) just like PKG
    2) move target dir
    3) install all designated PRF + unpackaged files into <target_dir>/fs.
       Note: where to store unpackaged files by default ?
 
SQ :
    1) just like RAW
    2) move target dir
    3) build a squashfs image from old target dir, and copy kernel too.

Note: SPF which support post-processing (RAW, SQ) also support the
'virtual-etc' option which consists in moving etc to usr/share/factory/base-etc
at the end of extraction. Note that this must be done at most once.

SPF organisation :

<target_dir>/fs/      <<< root here
            /old/     <<< old target_dir (see below)
            /SPF      <<< file which contains the SPF name
            /TYPE     <<< file which contains the image type (see below)

Nothing is ever placed directly into <target_dir>. 'fs' is the right directory
for every file to be copied. The 'old' sub-directory is used by SPF such as RAW
and SQ which each rely on the previous one. This makes it possible to keep
access to every intermediate file in the build process. The method is :

   mv $target_dir/old $target_dir/fs/old       (ignore errors)
   mv $target_dir/fs  $target_dir/old          (ignore errors)
   <rebuild_target_dir_fs and use 'old' for input if needed>

Software image type : the image type reflects what usage is expected from this
image. They are used to know what variable to look for when deciding where to
move everything to the final image. Accepted values are :

  - boot  => firmware, boot-loader, ...
  - root  => system root FS (may be compressed)
  - inst  => installation files must be moved to the right place
  - conf  => configuration files
  - data  => unqualified data

Then, we define the integration process which consists in merging all software
chunks together, respecting the directories imposed by the images types and
the products, then doing whatever is necessary to build the final image :

   1) merge all images
     - boot type images are copied into /
     - root type images are copied into $PK_ROOTDIR
     - inst type images are copied into $PK_INSTDIR
     - conf type images are copied into $PK_CONFDIR
     - data type images are copied into $PK_DATADIR
   
   2) build boot files from gathered info (eg: syslinux.cfg)
   
   3) build the image itself.

Integration or "final packaging" is largely dependant on the resulting medium.
Possibly that integration will bring no file (eg: grub-sq will rely on grub.*
being integrated in at least one software).
   

Real-life examples :
--------------------
This should be processed by the same script :

Product: flx-install for i586
medium  integration   software:spf  ...
-------+------------+--------------+---
  CD    isolinux-sq   boot-i386:SQ   full-pkg:PKG
mini-CD isolinux-sq   boot-i386:SQ   mini-pkg:PKG
  USB   grub-sq       boot-i386:SQ   mini-pkg:PKG
  PXE   pxelinux-sq   boot-i586:SQ   full-pkg:PKG

Note: integration method is determined by medium TYPE. Package selection is
      determined by medium SIZE.



Product: flx-recovery for ix86
medium  integration   software:spf  ...
-------+------------+--------------+---
  CD    isolinux-sq   boot-i386:SQ   memtest:RAW
mini-CD isolinux-sq   boot-i386:SQ   memtest:RAW
  USB   grub-sq       boot-i386:SQ   memtest:RAW
  PXE   pxelinux-sq   boot-i586:SQ   memtest:RAW



Product: flx-inject-i686
medium  integration   software:spf  ...
-------+------------+--------------+---
  CD    isolinux-sq   inj-i686:SQ   inj-p4-smp:SQ    memtest:RAW
  CF    grub-sq       inj-i686:SQ   inj-p4-smp:SQ    memtest:RAW
  USB   grub-sq       inj-i686:SQ   inj-p4-smp:SQ    memtest:RAW
  CD    isolinux-sq   boot-i686:SQ  inj-inst:PKG     memtest:RAW   ## packaging = INST



Product: landef-1.4. Model=ld60 => hardware=i586.
medium  integration   software:spf(+option)    ...
------+------------+--------------------+---
 CF64  ld-grub-fw   fw-1.0-i386:RAW+vetc ld-1.4-ld60:SQ
 CF128 ld-grub-fw   fw-1.0-i386:RAW+vetc ld-1.4-ld60:SQ ld-1.4-ld60:RAW  ## +debug img
 CF16  ld-grub-nofw ld-1.4-ld60:SQ+vetc
 FWIMG mk-bin-fwimg ld-1.4-ld60:SQ+vetc (.bin image for upgrade)

So we need more directories : "sp" for "software packaging" and "fp" for "final packaging".

   packaging/sp/flxsp.{cfg,def}
             sp/scripts/
   packaging/fp/flxfp.{cfg,def}
             fp/scripts/
   
Those should be provided by default by formilux but can be overriden by the
product.

### 2005/09/14 ### : precisions

Note that PRFs are no longer rewritten in place. Instead, they are copied,
merged with CNTs and rebuilt into the "var" directory. Everything except "var"
in the build process should work if the FS is monted R/O.


### 2005/08/29 ###

-- Mandatory variables --

MANUFACT_DIR : Root directory of the product manufacturer. Provides
               lots of default values. Must contain a sourceable
	       'flxmf.cfg' file.

The next ones are still mandatory but might be set by the 'flxmf.cfg' file if
preferred.

MEDIUM : type of destination medium. Eg: cd, cf

FLXTOP : top of the Formilux version.
         Eg: /data/projets/formilux/0.1/0.1.current

FLXPKG : standard Formilux released packages.
         Eg: /data/projets/formilux/0.1/0.1.current/pkg

VARPKG : temporary directory where to put packages being integrated
         into a single image. Eg: /var/formilux/varpkg.

SOFTWARE_DIR : directory containing definitions for the product being built,
               intependantly of hardware type. Must contain 'flxsw.cfg'.

HARDWARE_DIR : directory containing definitions for the hardware the product
               will run on. Must contain 'flxhw.cfg'.


It is recommended that config files inherit default values from parent dirs.
It is also recommended that those dirs contain a 'scripts' sub-directory to
host specific scripts.

Example: Let's consider the following :
   /data/projets/exceliance/flxmf.cfg
   /data/projets/exceliance/products/flxsw.cfg
   /data/projets/exceliance/products/landef/software/flxsw.cfg
   /data/projets/exceliance/products/landef/software/v1.0/flxsw.cfg
   /data/projets/exceliance/products/landef/models/ld300r/flxhw.cfg
   /data/hardware/lexcom/neris/flxhw.cfg
   /data/hardware/nexcom/nsa1045/flxhw.cfg
   /data/hardware/nexcom/nsa1046/flxhw.cfg

MANUFACT_DIR = /data/projets/exceliance
SOFTWARE_DIR = /data/projets/exceliance/products/landef/software/v1.0
   + /data/projets/exceliance/products/landef/software/flxsw.cfg
     + /data/projets/exceliance/products/landef/flxsw.cfg
       + /data/projets/exceliance/products/flxsw.cfg

HARDWARE_DIR = /data/projets/exceliance/products/landef/models/ld100
   + /data/hardware/nexcom/nsa1045/flxhw.cfg


Most variables names will be prefixed with :

 - MF for manufacturer specific configuration.
 - SW for software specific configuration.
 - HW for hardware specific configuration.

Eg: HW_RACKABLE=1
