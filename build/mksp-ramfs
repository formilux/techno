#!/bin/bash

#
# mksp-ramfs - make an initramfs from a raw FS - version 0.0.1 - 2016-09-09
# This file is part of the Formilux project : http://formilux.ant-computing.com/
#
# Copyright (C) 2001-2016 Benoit Dolez & Willy Tarreau
#       mailto: benoit@ant-computing.com,willy@ant-computing.com
#
# This program is licenced under GPLv2 ( http://www.gnu.org/licenses/gpl.txt )

MYNAME="${0##*/}"
CMDLINE="$*"

# variables below are inherited from the caller
# _CPIO_OPTS contains the options to pass to _CPIO after -o
# _CPIO_COMP contains an optional space-delimited list of extra compressed
# archives to produce.
_CPIO=${_CPIO:-cpio}
_CPIO_OPTS=${_CPIO_OPTS:--H newc}
_CPIO_COMP=( ${_CPIO_COMP:-} )
_GZIP=${_GZIP:-gzip -c9}
_XZ=${_XZ:-xz -c9}

# usage: displays script usage and returns no error.
function usage {
  echo "MKSP-RAMFS - package a root dir as an initramfs - version 0.0.1 - 2016-09-09"
  echo "Usage: ${myname##*/} -o <target_dir> { -i <in_dir> | -c } [ -d ] [ -ve ]"
  echo "       [ -md dir ]* [ -rm file|dir ]* [ -ln src:dst ]*"
  echo
  echo "   The 'fs' directory will be deleted under <target_dir>, and the execution"
  echo "   will end here if '-c' is set. Otherwise, an 'fs' directory will be created"
  echo "   under <target_dir>, with an initramfs image built from <in_dir>. All paths"
  echo "   are absolute. '-ve' creates a 'vetc' image"
  echo "   by moving /etc to /usr/share/factory/base-etc. '-md' makes it possible to"
  echo "   create new directories right before packaging, eg: mount points. '-rm' makes"
  echo "   it possible to remove some files or dirs before packaging. '-ln' creates"
  echo "   symlinks from 'src' to 'dst' at the end of the packaging (after -ve)."
  echo "   Use '-d' for debug."
}

function die {
  echo
  echo "### ${MYNAME}: $@"
  echo "Cmdline was $CMDLINE"
  echo
  exit 1
}

function do_clean {
  rm -rf $OUT_DIR/{fs,base,temp} \
  || die "There was an error cleaning the '$OUT_DIR' directory. Aborting."
}

shopt -s nullglob dotglob
set -o pipefail
umask 022

myname=$0
PRINTUSAGE=0
CLEAN_ONLY=0
DEBUG=0
VETC=0

unset IN_DIR OUT_DIR MKDIRS RMDIRS

MKDIRS=( )
RMDIRS=( )
SYMLINKS=( )

[ $# -gt 0 ] || PRINTUSAGE=1

while [ $# -gt 0 ] ; do
  case "$1" in 
    -i) # -i in_dir
      if [ -z "$2" -o ! -d "$2/." ]; then
        die "-i argument '$2' point to something not a valid directory. Aborting."
	PRINTUSAGE=1
      fi
      IN_DIR=$2
      shift;
      ;; 
    -o) # -o out_dir : must be a directory or must not exist
      [ -n "$2" -a \( -d "$2/." -o ! -e "$2" \) ] || PRINTUSAGE=1
      OUT_DIR=$2
      shift;
      ;; 
    -ln) # -ln src:dst : create symlinks from src to dst at the end.
      [ -n "$2" ] || PRINTUSAGE=1
      SYMLINKS=( "${SYMLINKS[@]}" "$2" )
      shift;
      ;; 
    -md) # -md dir : directories we want to create.
      [ -n "$2" ] || PRINTUSAGE=1
      MKDIRS=( "${MKDIRS[@]}" "$2" )
      shift;
      ;; 
    -rm) # -rm dir : directories or files we want to remove.
      [ -n "$2" ] || PRINTUSAGE=1
      if [ -z "${2##/*}" ]; then
        die "For security reasons, -rm cannot specify an absolute path. Remove the leading /"
      fi
      RMDIRS=( "${RMDIRS[@]}" "$2" )
      shift;
      ;; 
    -c) # -c = clean
      CLEAN_ONLY=1
      ;;
    -d) # -d = clean
      DEBUG=1
      ;;
    -ve) # -ve = virtual-etc
      VETC=1
      ;;
    -h) # displays help
      PRINTUSAGE=1
      shift
      ;;
  esac
  shift
done

if [ $PRINTUSAGE -gt 0 -o -z "$OUT_DIR" -o "$OUT_DIR" = "/" -o $CLEAN_ONLY = 0 -a -z "$IN_DIR" ]; then
  usage
  echo
  exit 1
fi

mkdir -p $OUT_DIR || die "Cannot make directory '$OUT_DIR'. Aborting."

[ -n "${OUT_DIR##/*}" ] && OUT_DIR=$PWD/$OUT_DIR
OUT_DIR=${OUT_DIR//\/.\//\/}
[ -n "${IN_DIR##/*}" ] && IN_DIR=$PWD/$IN_DIR
IN_DIR=${IN_DIR//\/.\//\/}

echo;echo "+++ Cleaning output dir +++";echo
do_clean

if [ $CLEAN_ONLY -gt 0 ]; then
  echo "+++ Done ! +++";
  echo "==> The '$OUT_DIR' directory has been cleaned."
  echo
  exit 0
fi

mkdir -p $OUT_DIR/fs || die "Cannot make directory '$OUT_DIR/fs'. Aborting."
ln -s $IN_DIR $OUT_DIR/base || die "Cannot make link '$OUT_DIR/base'. Aborting."

#===================================================================================

mkdir -p $OUT_DIR/temp/root || die "Cannot make directory '$OUT_DIR/temp/root'. Aborting."

# build cpio image

echo "Copying root filesystem image..."
tar -C $IN_DIR --exclude=./boot -cf - . | tar -C $OUT_DIR/temp/root/ -xpf - \
  || die "Error during file-system copy."

# create at least the /boot directory
mkdir -p $OUT_DIR/temp/root/boot

# initramfs uses /init so if it doesn't exist, we link it to sbin/init
[ -e $OUT_DIR/temp/root/init ] || ln -s sbin/init $OUT_DIR/temp/root/init

echo;echo "+++ Building initramfs +++";echo

if [ "$VETC" = 1 ]; then
  mv $OUT_DIR/temp/root/etc $OUT_DIR/temp/root/usr/share/factory/base-etc
  mkdir -m 0755 -p $OUT_DIR/temp/root/etc
fi

# FIXME: it's not this script's role to delete those entries
for dir in "${RMDIRS[@]}"; do
  rm -rf "$OUT_DIR/temp/root/$dir"
done

# FIXME: it's not this script's role to create those entries
for dir in "${MKDIRS[@]}"; do
  mkdir -p "$OUT_DIR/temp/root/$dir"
done

# FIXME: it's not this script's role to create those entries
for dir in "${SYMLINKS[@]}"; do
  src="${dir%%:*}"
  dst="${dir#*:}"
  ln -s "$dst" "$OUT_DIR/temp/root/$src"
done

(cd $OUT_DIR/temp/root; find . | $_CPIO -o $_CPIO_OPTS) > $OUT_DIR/fs/initramfs.cpio || die "cpio returned an error."
for fmt in ${_CPIO_COMP[*]}; do
	if [ "$fmt" = "gz" ]; then
		echo;echo "+++ Compressing initramfs with gzip +++";echo
		$_GZIP < $OUT_DIR/fs/initramfs.cpio > $OUT_DIR/fs/initramfs.cpio.gz || die "gzip returned an error."
	elif [ "$fmt" = "xz" ]; then
		echo;echo "+++ Compressing initramfs with xz +++";echo
		$_XZ < $OUT_DIR/fs/initramfs.cpio > $OUT_DIR/fs/initramfs.cpio.xz || die "xz returned an error."
	else
		die "Unknown initramfs compression format $fmt (check variable _CPIO_COMP)"
	fi
done

[ $DEBUG -eq 0 ] && rm -rf $OUT_DIR/temp

echo
echo "+++ Done ! +++";
echo "==> InitRAMFS archive(s) available in '$OUT_DIR/fs'."
echo
