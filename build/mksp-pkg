#!/bin/bash

#
# mksp-pkg - make a pkg dir from several softwares - version 0.0.8 - 2007-08-13
# This file is part of the Formilux project : http://formilux.ant-computing.com/
#
# Copyright (C) 2001-2005 Benoit Dolez & Willy Tarreau
#       mailto: benoit@ant-computing.com,willy@ant-computing.com
#
# This program is licenced under GPLv2 ( http://www.gnu.org/licenses/gpl.txt )

# FIXME: should we use "-follow -type f" or "-xtype f" ?
# the first one follows directories, is it really needed ?

#### update PATH to include this script's directory
MYNAME="${0##*/}"
MYDIR="${0%/*}"
[ "${PATH#$MYDIR:}" == "$PATH" ] && export PATH="$MYDIR:$PATH"

#### source defaults file if it exists
FLXDEFAULTS="${FLXDEFAULTS-$HOME/.flxdefaults}"
if [ -r "$FLXDEFAULTS" ]; then
  . "$FLXDEFAULTS"
fi

# Searches for scripts in this order :
# - _mksp_pkg_<script name>
# - <script name>
# - $SCRIPTDIR/<script name>
# - script name

_cnt2prf="${_mksp_pkg_cnt2prf-${cnt2prf-${SCRIPTDIR:+$SCRIPTDIR/}cnt2prf}}"
_fix_prf="${_mksp_pkg_fix_prf-${fix_prf-${SCRIPTDIR:+$SCRIPTDIR/}fix-prf}}"
_updt_prf="${_mksp_pkg_updt_prf-${updt_prf-${SCRIPTDIR:+$SCRIPTDIR/}updt-prf}}"
_prfdiff="${_mksp_pkg_prfdiff-${prfdiff-${SCRIPTDIR:+$SCRIPTDIR/}prfdiff}}"

#_="${_mksp_pkg_-${-}}"
_cp="${_mksp_pkg_cp-${cp-cp}}"
_ln="${_mksp_pkg_ln-${ln-ln}}"
_mv="${_mksp_pkg_mv-${mv-mv}}"
_rm="${_mksp_pkg_rm-${rm-rm}}"
_awk="${_mksp_pkg_awk-${awk-awk}}"
_sed="${_mksp_pkg_sed-${sed-sed}}"
_find="${_mksp_pkg_find-${find-find}}"
_mkdir="${_mksp_pkg_mkdir-${mkdir-mkdir}}"
_sort="${_mksp_pkg_sort-${sort-sort}}"
_rmdir="${_mksp_pkg_rmdir-${rmdir-rmdir}}"
_chmod="${_mksp_pkg_chmod-${chmod-chmod}}"
_chown="${_mksp_pkg_chown-${chown-chown}}"

CMDLINE="$*"

# usage: displays script usage and returns no error.
function usage {
  echo "MKSP-PKG - make a pkg dir from several softwares - version 0.0.6 - 2006-07-03"
  echo "Usage: ${myname##*/} { -c |  [ -i <base_dir> ]* [ -prf <base_dir:match> ]* "
  echo "       [ -pkgi <base_dir:file> ]* [ -pkge <base_dir:file> ]* }"
  echo "       -o <out_dir> [ -b build_ver] [ -d ] [ -nc ]"
  echo
  echo "   The 'fs' directory will be deleted under <out_dir>, and the execution will"
  echo "   end here if '-c' is set. Otherwise, an 'fs' directory will be created under"
  echo "   <out_dir>, with packages copied (or linked) from dirs <out_dir>. The pkgi"
  echo "   and pkge options provide a way to supply, for each <base_dir>, a package"
  echo "   match list via a file located either relative to <base_dir> or at another"
  echo "   absolute path. The prf option sets a file match on the prf names to be"
  echo "   scanned for under <base_dir>/prf and <base_dir>/cnt. Those prf will use all"
  echo "   the packages installed up to and before <base_dir>/pkg. This means that to"
  echo "   cross-reference another tree, you have to work on the other tree first."
  echo "   All paths are absolute. '-b' is used to force the version which appears"
  echo "   everywhere. Uses several scripts from \$SCRIPTDIR='$SCRIPTDIR'."
  echo "   -nc disables prf consistency checking. Use '-d' for debug."
}

function die {
  echo
  echo "### ${MYNAME}: $@"
  echo "Cmdline was $CMDLINE"
  echo
  exit 1
}

function do_clean {
  $_rm -rf $OUT_DIR/{fs,base,temp} \
  || die "There was an error cleaning the '$OUT_DIR' directory. Aborting."
}

shopt -s nullglob dotglob
set -o pipefail
umask 022

myname=$0
PRINTUSAGE=0
CLEAN_ONLY=0
DEBUG=0
NOCONS=0

# default names
INCLUDE_FILE_NAME=PKGLIST
EXCLUDE_FILE_NAME=PKG_EXCLUDE

unset IN_DIRS IN_DIR OUT_DIR BUILDVERSION PKGI PKGO PRF

IN_DIRS=( )
PRF=( )
PKGI=( )
PKGO=( )

[ $# -gt 0 ] || PRINTUSAGE=1

while [ $# -gt 0 ] ; do
  case "$1" in 
    -i) # -i in_dir
      if [ -z "$2" -o ! -d "$2/." ]; then
        die "-i argument '$2' point to something not a valid directory. Aborting."
	PRINTUSAGE=1
      fi
      IN_DIRS=( "${IN_DIRS[@]}" "$2" )
      shift;
      ;; 
    -pkgi) # -pkgi in_dir:<pkglist to include>
      [ -n "$2" -a -z "${2##*:*}" ] || PRINTUSAGE=1
      PKGI=( "${PKGI[@]}" "$2" )
      shift;
      ;; 
    -pkge) # -pkge in_dir:<pkglist to exclude>
      [ -n "$2" -a -z "${2##*:*}" ] || PRINTUSAGE=1
      PKGE=( "${PKGE[@]}" "$2" )
      shift;
      ;; 
    -prf) # -prf in_dir:<prf files match to merge>
      [ -n "$2" -a -z "${2##*:*}" ] || PRINTUSAGE=1
      PRF=( "${PRF[@]}" "$2" )
      shift;
      ;; 
    -o) # -o out_dir : must be a directory or must not exist
      [ -n "$2" -a \( -d "$2/." -o ! -e "$2" \) ] || PRINTUSAGE=1
      OUT_DIR=$2
      shift;
      ;; 
    -b) # -b build_version : force the version which will appear in all kernel.ver
      [ -n "$2" ] || PRINTUSAGE=1
      BUILDVERSION="$2"
      shift;
      ;; 
    -c) # -c = clean
      CLEAN_ONLY=1
      ;;
    -d) # -d = clean
      DEBUG=1
      ;;
    -nc) # -nc = no consistency checking
      NOCONS=1
      ;;
    -h) # displays help
      PRINTUSAGE=1
      shift
      ;;
  esac
  shift
done

if [ $PRINTUSAGE -gt 0 -o -z "$OUT_DIR" -o "$OUT_DIR" = "/" -o $CLEAN_ONLY = 0 -a ${#IN_DIRS[@]} = 0 ]; then
  usage
  echo
  exit 1
fi

$_mkdir -p "$OUT_DIR" || die "Cannot make directory '$OUT_DIR'. Aborting."

[ -n "${OUT_DIR##/*}" ] && OUT_DIR="$PWD/$OUT_DIR"
OUT_DIR="${OUT_DIR//\/.\//\/}"

echo;echo "+++ Cleaning output dir +++";echo
do_clean

if [ $CLEAN_ONLY -gt 0 ]; then
  echo "+++ Done ! +++";
  echo "==> The '$OUT_DIR' directory has been cleaned."
  echo
  exit 0
fi

$_mkdir -p $OUT_DIR/fs || die "Cannot make directory '$OUT_DIR/fs'. Aborting."
$_mkdir -p $OUT_DIR/temp || die "Cannot make directory '$OUT_DIR/temp'. Aborting."

#===================================================================================

# Pass the original prf directory in $1 and the rebuilt one in $2.
# Note that files under $2/rescan are automatically detected and used.
prf_consistency_check() {
  local incons=0
  local todelete=0
  local p q
  local nopkg

  for p in $(cd "$1" && echo *.prf); do
    echo "Checking PRF $p for inconsistencies ..."
    nopkg=( )
    # if we have a rescan output for this file, we must use it instead.
    # We enumerate separately the missing packages, and we don't list the files
    # related to them in the output (we fake as if they were present).
    if [ -e "$2/rescan.log/${p%.prf}.log" ]; then
        todelete=1
        nopkg=( $( $_awk '/^##no package## / { print $4 }' "$2/rescan.log/${p%.prf}.log" | $_sort -u ) )
        $_sed -e '/^##not found##/d;s/^##no package## //' "$2/rescan.log/${p%.prf}.log"  > "$2/rescan.log/${p%.prf}.log.tmp"
	q="$2/rescan.log/${p%.prf}.log.tmp"
    elif [ -e "$2/rescan/$p" ]; then
	q="$2/rescan/$p"
    else
	q="$2/$p"
    fi

    if [ ${#nopkg[@]} -gt 0 ]; then
      echo "    The following packages are missing. Their files will not be listed."
      echo "    >>> ${nopkg[@]} <<<"
      echo
    fi

    if ! $_prfdiff "$1/$p" "$q" >/dev/null 2>&1; then
      echo "    The following differences have been found between 'expected' and 'found' :"
      $_prfdiff "$1/$p" "$q"
      echo
      ((incons++))
      incons_list[${#incons_list[@]}]="$p"
    fi
  done
  echo "  -> done."
  
  if [ $incons -gt 0 ]; then
    echo;echo;
    echo "                  +++++++  WARNING !!!  +++++++"
    echo "    There were inconsistencies between expected and used packages"
    echo "    for the following PRF files :"
    echo "    >>> ${incons_list[@]} <<<"
    echo
    echo "    - the original files were in $1"
    echo "    - the rebuild files were in $2"
    echo
    if [ $todelete -ne 0 ]; then
      echo "    Additionnaly, the directories $2/rescan* must be removed."
      echo
    fi
    echo "    => You should press <Ctrl>-C now and fix them by hand,"
    echo "       or press <ENTER> now to ignore the problem."
    echo
    read
  fi
}

#===================================================================================

$_mkdir -p $OUT_DIR/temp/{cnt,pkg,prf,cnt-ok,prf-ok} || \
  die "Cannot make directory '$OUT_DIR/temp/{cnt,pkg,prf,cnt-ok,prf-ok}'. Aborting."

# will contain the total list of prfs, tgz, etc... to be installed
FULL_INST=( )

for IN_DIR in "${IN_DIRS[@]}"; do
  echo;echo "+++ Processing directory $IN_DIR +++"
  arg_dir="${IN_DIR}"

  [ -n "${IN_DIR##/*}" ] && IN_DIR="$PWD/$IN_DIR"
  IN_DIR="${IN_DIR//\/.\//\/}"

  # set the default package include/exclude files
  EXCLUDE_FILE=
  INCLUDE_FILE=

  [ -r "$IN_DIR/$EXCLUDE_FILE_NAME" ] && EXCLUDE_FILE="$IN_DIR/$EXCLUDE_FILE_NAME"
  [ -r "$IN_DIR/$INCLUDE_FILE_NAME" ] && INCLUDE_FILE="$IN_DIR/$INCLUDE_FILE_NAME"

  # FIXME: we should be a bit looser on those test, so that $pkg could match
  # arg_dir if it starts with the same directory components.
  # eg: arg_dir="$arg_dir/"; [ -z ${arg_dir##${pkg%%:*}/} ]

  # find the associated prf list from the arg list
  prflist_args=( )
  for prf in "${PRF[@]}"; do
    if [ "${prf%%:*}" = "$arg_dir" ]; then
      prflist_args=( "${prflist_args[@]:+${prflist_args[@]} -or}" -name "${prf##*:}" )
      break
    fi
  done

  if [ ${#prflist_args[@]} -gt 0 ]; then
    prflist_args=( "-and" "(" "${prflist_args[@]}" ")" )
  fi

  # find the associated exclude file from the arg list
  for pkg in "${PKGI[@]}"; do
    if [ "${pkg%%:*}" = "$arg_dir" ]; then
      INCLUDE_FILE="${pkg##*:}"
      [ -n "${INCLUDE_FILE##/*}" ] && INCLUDE_FILE="$IN_DIR/$INCLUDE_FILE"
      break
    fi
  done

  # find the associated exclude file from the arg list
  for pkg in "${PKGE[@]}"; do
    if [ "${pkg%%:*}" = "$arg_dir" ]; then
      EXCLUDE_FILE="${pkg##*:}"
      [ -n "${EXCLUDE_FILE##/*}" ] && EXCLUDE_FILE="$IN_DIR/$EXCLUDE_FILE"
      break
    fi
  done

  # build exclude arg based on what is in the exclude file ('find' syntax)
  exclude_args=( )
  if [ -n "$EXCLUDE_FILE" ]; then
    if [ -r "$EXCLUDE_FILE" ]; then
      while read -r name; do
        exclude_args=( "${exclude_args[@]}" -and -not -name "${name}" )
      done < $EXCLUDE_FILE
    else
      echo "   +++ WARNING! Unreadable file in -pkge : $EXCLUDE_FILE"
    fi
  fi

  if [ -n "$INCLUDE_FILE" -a ! -r "$INCLUDE_FILE" ]; then
    echo "   +++ WARNING! Unreadable file in -pkgi : $INCLUDE_FILE"
  fi

  # now, we'll link or copy the files listed in the include file, except those
  # listed in the exclude file.

  not_found=( )
  if [ -z "$INCLUDE_FILE" ]; then
    # install everything from this directory (default)
    echo;echo "   +++ Copying all the packages to the medium's data directory +++";echo
    list=( $($_find $IN_DIR/pkg/ -follow -maxdepth 3 -type f -and \( -name \*.tgz -o -name \*.lst -o -name \*.dep \) \
	"${exclude_args[@]}" 2>/dev/null ) )
    if [ ${#list[@]} -gt 0 ]; then
      # FIXME: we should first remove those files if they exist
      $_ln -v "${list[@]}" $OUT_DIR/temp/pkg/ 2>/dev/null || $_cp -avH "${list[@]}" $OUT_DIR/temp/pkg/
    else
      echo "   -> No package found in directory $IN_DIR/pkg"
    fi
  elif [ -r "$INCLUDE_FILE" ]; then
    echo;echo "   +++ Copying all the packages in ${INCLUDE_FILE##*/} to the medium's data directory +++";echo
    while read -r pkg_name; do
	[ -n "${pkg_name##\#*}" ] || continue
	# too slow !!!
	#list=( $($_find $IN_DIR/pkg/ -follow -maxdepth 3 -type f \( -name "$pkg_name" -o -name "$pkg_name[-.]*" \) \
	#	-and \( -name \*.tgz -o -name \*.lst -o -name \*.dep \) \
	#	"${exclude_args[@]}" 2>/dev/null ) )

	# we'll look for packages only in directories starting with the first word of the package
	pkg_radix="${pkg_name%%[-._0-9]*}"
	dir_list=( $($_find $IN_DIR/pkg/ -follow -maxdepth 1 -type d -name "${pkg_radix}*" ) )
	if [ ${#dir_list[@]} -eq 0 ]; then
		# nothing was found, let's resort to plain old slow method
		list=( $($_find $IN_DIR/pkg/ -follow -maxdepth 3 -type f \( -name "$pkg_name" -o -name "$pkg_name[-.]*" \) \
			-and \( -name \*.tgz -o -name \*.lst -o -name \*.dep \) \
			"${exclude_args[@]}" 2>/dev/null ) )
	else
		list=( $($_find "${dir_list[@]}" -follow -maxdepth 2 -type f \( -name "$pkg_name" -o -name "$pkg_name[-.]*" \) \
			-and \( -name \*.tgz -o -name \*.lst -o -name \*.dep \) \
			"${exclude_args[@]}" 2>/dev/null ) )
	fi
	if [ ${#list[@]} -gt 0 ]; then
	  # FIXME: we should first remove those files if they exist
	  $_ln -v "${list[@]}" $OUT_DIR/temp/pkg/ 2>/dev/null || $_cp -avH "${list[@]}" $OUT_DIR/temp/pkg/
	else
	  # We did not find this package in the original software dir. Maybe it
	  # was provided by former software, and is already lying in the dir.

	  nf=( $($_find $OUT_DIR/temp/pkg -maxdepth 1 \( -name "$pkg_name" -o -name "$pkg_name[-.]*" \) 2>/dev/null) )
	  if [ ${#nf[@]} -eq 0 ]; then
	    echo "   -> Package not found : $pkg_name"
	    not_found=( "${not_found[@]}" "$pkg_name" )
          fi
	fi
    done < $INCLUDE_FILE

    if [ ${#not_found[@]} -gt 0 ]; then
	echo
	echo "    The following packages were referenced by $INCLUDE_FILE but not found : "
	echo "    >>> ${not_found[@]} <<<"
	echo
        echo "    +++ Press <ENTER> to continue of <Ctrl>-C to stop here +++"; read
        echo
    fi
  else
    echo;echo "   +++ Package list ($INCLUDE_FILE) not found +++";echo
  fi

  # 1) we must copy all .prf files we know about
  if [ -e "$IN_DIR/prf" ]; then
    list=( $($_find "$IN_DIR/prf/" -follow -maxdepth 3 -type f "${prflist_args[@]}" -name "*.prf" 2>/dev/null ) )
    FULL_LIST=( "${FULL_LIST[@]}" "${list[@]##*/}" )
    [ ${#list[@]} -gt 0 ] && $_cp -avH "${list[@]}" "$OUT_DIR/temp/prf/"

    # everything not a .prf can be copied as-is into the target directory
    list=( $($_find "$IN_DIR/prf/" -follow -maxdepth 3 -type f "${prflist_args[@]}" -not -name "*.prf" 2>/dev/null ) )
    FULL_LIST=( "${FULL_LIST[@]}" "${list[@]##*/}" )
    [ ${#list[@]} -gt 0 ] && $_cp -avH "${list[@]}" "$OUT_DIR/temp/pkg/"
  fi

  # 2) then we must copy all .cnt files
  if [ -e "$IN_DIR/cnt" ]; then
    list=( $($_find "$IN_DIR/cnt/" -follow -maxdepth 3 -type f "${prflist_args[@]}" -name "*.cnt" 2>/dev/null ) )
    [ ${#list[@]} -gt 0 ] && $_cp -avH "${list[@]}" "$OUT_DIR/temp/cnt/"
  fi

  # 3) Now, let's fix the .prf. It's important to do this before merging other packages
  $_updt_prf "$OUT_DIR/temp/prf" "$OUT_DIR/temp/pkg"

  if [ $NOCONS -eq 0 -a -d "$IN_DIR/prf/." ]; then
    prf_consistency_check "$IN_DIR/prf" "$OUT_DIR/temp/prf"
  fi

  if [ -n "$(echo $OUT_DIR/temp/prf/rescan/*)" ]; then
    echo;echo "+++++++++++++++++++++++++++++++";echo
    echo "Some changes have been detected, please check those two directories :"
    echo "  - $OUT_DIR/temp/prf/rescan/"
    echo "  - $OUT_DIR/temp/prf/rescan.log/"
    echo "If you need to fix files, those were initially found here : $IN_DIR/prf"
    echo
    exit 1
  else
    $_rmdir $OUT_DIR/temp/prf/rescan $OUT_DIR/temp/prf/rescan.log 2>/dev/null
  fi
  # move the prfs to their destination now, so that we don't risk rescanning them
  [ -n "$(echo $OUT_DIR/temp/prf/*)" ] && $_mv $OUT_DIR/temp/prf/* $OUT_DIR/temp/prf-ok/
  # the prf dir is now empty and available for next round

  # 4) we generate the .prf from .cnt, possibly overwriting the ones copied in (1 and 3)
  if [ -n "$(echo $OUT_DIR/temp/cnt/*)" ]; then
    for cnt in "$OUT_DIR"/temp/cnt/*.cnt; do
      prf="${cnt%.cnt}.prf"
      # we'll convert the cnt files to prf while ensuring that their version is
      # respected.
      $_cnt2prf < "$cnt" | PKGDIRS="$OUT_DIR/temp/pkg" $_fix_prf -s2 > "$prf"
      FULL_LIST=( "${FULL_LIST[@]}" "${prf##*/}" )
    done

    # Now, let's fix the resulting .prf. It's important to do this before merging other packages
    $_updt_prf "$OUT_DIR/temp/cnt" "$OUT_DIR/temp/pkg"

    if [ $NOCONS -eq 0 -a -d "$IN_DIR/cnt/." ]; then
      prf_consistency_check "$IN_DIR/cnt" "$OUT_DIR/temp/cnt"
    fi

    if [ -n "$(echo $OUT_DIR/temp/cnt/rescan/*)" ]; then
      echo;echo "+++++++++++++++++++++++++++++++";echo
      echo "Some changes have been detected, please check those two directories :"
      echo "  - $OUT_DIR/temp/cnt/rescan/"
      echo "  - $OUT_DIR/temp/cnt/rescan.log/"
      echo "If you need to fix files, those were initially found here : $IN_DIR/cnt"
      exit 1
    else
      $_rmdir $OUT_DIR/temp/cnt/rescan $OUT_DIR/temp/cnt/rescan.log 2>/dev/null
    fi
    [ -n "$(echo $OUT_DIR/temp/cnt/*.prf)" ] && $_mv $OUT_DIR/temp/cnt/*.prf $OUT_DIR/temp/prf-ok/ 2>/dev/null
    [ -n "$(echo $OUT_DIR/temp/cnt/*.cnt)" ] && $_mv $OUT_DIR/temp/cnt/* $OUT_DIR/temp/cnt-ok/ 2>/dev/null
    # the cnt dir is now empty and available for next round
  fi
done

$_chown -R root:root $OUT_DIR/temp/pkg 2>/dev/null
$_chmod -R ugo+rX $OUT_DIR/temp/pkg 2>/dev/null

#$_mv $OUT_DIR/temp/cnt-ok/* $OUT_DIR/fs/
[ -n "$(echo $OUT_DIR/temp/pkg/*)" ] && $_cp -aH $OUT_DIR/temp/pkg/* $OUT_DIR/fs/
[ -n "$(echo $OUT_DIR/temp/prf-ok/*)" ] && $_cp -aH $OUT_DIR/temp/prf-ok/* $OUT_DIR/fs/

# put the full list of packages to be installed in the target dir
# FIXME: there can be duplicates from conflicting prf & cnt.
for prf in "${FULL_LIST[@]}"; do echo "$prf"; done | $_sort -u > $OUT_DIR/fs/.FULL_LIST

[ $DEBUG -eq 0 ] && $_rm -rf $OUT_DIR/temp

echo
echo "+++ Done ! +++";
echo "==> Selected packages are available in '$OUT_DIR/fs'."
echo
