#!/bin/sh

PROG="${0##*/}"
INFILE=
OUTFILE=
UPDATE=

usage() {
	echo "Usage: $PROG [-u] [-i <infile>] [-o <outfile>] [<searchdir>]" >&2
	echo "  - if <searchdir> is specified, repositories are looked for" >&2
	echo "    from this location, otherwise from current directory." >&2
	echo "  - output paths will be relative to <searchdir>" >&2
	echo "  - it is perfectly possible to pipe in the output of list-all-repos." >&2
	echo "  - an output file may be specified with -o instead of stdout." >&2
	echo "    In this case, it will be atomically written to." >&2
	echo "  - an input file may be specified with -i instead of stdin." >&2
	echo "  - -u just performs an update of <outfile> for input repos." >&2
	echo >&2
	exit 1
}

while [ $# -gt 0 ]; do
	[ -n "$1" -a -z "${1##-*}" ] || break

	if [ "$1" = "-h" ]; then
		usage
	elif [ "$1" = "-u" ]; then
		UPDATE=1
	elif [ "$1" = "-i" ]; then
		[ $# -gt 1 ] || usage
		shift
		INFILE="$1"
		if [ ! -s "$INFILE" ]; then
			echo "Fatal: $INFILE is not a valid input file." >&2
			exit 2
		fi
	elif [ "$1" = "-o" ]; then
		[ $# -gt 1 ] || usage
		shift
		OUTFILE="$1"
		if [ -e "$OUTFILE" -a ! -f "$OUTFILE" ]; then
			echo "Fatal: output file $OUTFILE may only be a regular file." >&2
			exit 2
		fi
	else
		usage
	fi
	shift
done

[ $# -le 1 ] || usage

if [ $# -eq 1 ]; then
	if [ ! -d "$1/." ]; then
		echo "Fatal: $1 is not a valid directory" >&2
		exit 2
	fi
	SEARCH="$1"
else
	SEARCH=
fi

if [ -n "$INFILE" ]; then
	exec 5<&0 <"$INFILE"
fi

# If an output file is specified, we first play with a temp file that we delete
# immediately so that if the user stops processing, we don't leave temp files.
if [ -n "$OUTFILE" ]; then
	OUTTMP="$OUTFILE.$$.tmp"
	rm -f "$OUTTMP"
	touch "$OUTTMP"
	exec 4>&1 3<"$OUTTMP" >"$OUTTMP"
	rm -f "$OUTTMP"
	# The temp file is still attached to fd #0 and #1.
fi

# let's perform the chdir in a subshell
(
	PATTERNS=( )

	if [ -n "$UPDATE" ]; then
		# for an update, we will need to read the output file at the
		# end, so let's open it now on fd #5.
		[ -r "$OUTFILE" ] && exec 5<"$OUTFILE" || exec 5</dev/null
	fi

	[ -n "$SEARCH" ] && cd "$SEARCH"
	while read r; do
		r="${r%/}"
		[ -d "${r}.git" ] && g="${r}.git" || g="${r}/.git"
		PATTERNS[${#PATTERNS[*]}]="-e"
		PATTERNS[${#PATTERNS[*]}]="^${r}\\b"
		GIT_DIR="$g" git show-ref --heads --tags | sed -e "s,^,${r} ,"
	done
	if [ -n "$UPDATE" ]; then
		# add the contents of previous output file now for the
		# remaining repositories.
		grep -E -v "${PATTERNS[@]}" <&5
		exec 5<&-
	fi
) | sort

if [ -n "$OUTFILE" ]; then
	# by reading stdin, we read the entire deleted temp file
	cat <&3 >"$OUTTMP"
	exec 3<&- >&4 4>&-
	mv "$OUTTMP" "$OUTFILE"
fi

if [ -n "$INFILE" ]; then
	exec <&5 5<&-
fi
